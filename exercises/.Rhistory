library(ape) #utility fns
library(geiger) #utilty fns
library(OUwie)
tree <- read.tree("~/CodonUsageBias/organisms/Lachancea/results/rokas_noBay_RAxML_bestTree_rooted.nwk")
continuous.data <- read.csv(file="~/CodonUsageBias/organisms/Lachancea/results/delta_M_means.csv", stringsAsFactors=FALSE, header=T) #death to factors.
continuous.data <- t(continuous.data)
CleanData <- function(phy, data) {
#treedata() in Geiger is probably my favorite function in R.
return(treedata(phy, data))
}
cleaned.data <- CleanData(tree, continuous.data)
CleanData <- function(phy, data) {
#treedata() in Geiger is probably my favorite function in R.
return(treedata(phy, data))
}
cleaned.data <- CleanData(tree, continuous.data)
VisualizeData <- function(phy, data) {
#Important here is to LOOK at your data before running it. Any weird values? Does it all make sense? What about your tree? Polytomies?
phytools::contMap(phy, data)
}
VisualizeData(cleaned.data$phy, cleaned.data$data[,1]) # data is multivariate but contMap only works for univariate?
BM1 <- geiger::fitContinuous(cleaned.data$phy, cleaned.data$data[,1], model="BM")
print(paste("The rate of evolution is", BM1$opt$sigsq, "in units of", "substitutions per codon, the units of the tree"))
AIC.BM1 <- BM1$opt$aic
AIC.OU1 <- OU1$opt$aic
OU1 <- fitContinuous(cleaned.data$phy, cleaned.data$data[,1], model="OU")
par(mfcol=c(1,2))
plot(tree, show.tip.label=FALSE)
ou.tree <- rescale(tree, model="OU", OU1$opt$alpha)
plot(ou.tree, show.tip.label=FALSE)
AIC.BM1 <- BM1$opt$aic
AIC.OU1 <- OU1$opt$aic
delta.AIC.BM1 <- AIC.BM1 - min(c(AIC.BM1, AIC.OU1))
delta.AIC.OU1 <- AIC.OU1 - min(c(AIC.BM1, AIC.OU1))
cat("AIC.BM1\tAIC.OU1\tdelta.AIC.BM1\tdelta.AIC.OU1\n")
cat(paste(AIC.BM1,AIC.OU1,delta.AIC.BM1, delta.AIC.OU1, sep="\t"))
one.discrete.char <- factor(c(rep(0, 5), rep(1, 17)))
reconstruction.info <- ace(one.discrete.char, cleaned.data$phy, type="discrete", method="ML", CI=TRUE)
best.states <- colnames(reconstruction.info$lik.anc)[apply(reconstruction.info$lik.anc, 1, which.max)]
cleaned.data$phy$node.label <- best.states
reg <- sample(1:2, nrow(cleaned.data$data), TRUE) #rep(1, nrow(cleaned.data$data))
cont.data <- data.frame(species=rownames(cleaned.data$data), Reg=reg, trait=cleaned.data$data[,1])
nodeBased.OUMV <- OUwie(cleaned.data$phy, cont.data, model="OUMV", simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(nodeBased.OUMV)
one.discrete.char <- factor(c(rep(0, 5), rep(1, 17)))
reconstruction.info <- ace(one.discrete.char, cleaned.data$phy, type="discrete", method="ML", CI=TRUE)
best.states <- colnames(reconstruction.info$lik.anc)[apply(reconstruction.info$lik.anc, 1, which.max)]
cleaned.data$phy$node.label <- best.states
reg <- sample(1:2, nrow(cleaned.data$data), TRUE) #rep(1, nrow(cleaned.data$data))
cont.data <- data.frame(species=rownames(cleaned.data$data), Reg=reg, trait=cleaned.data$data[,1])
nodeBased.OUMV <- OUwie(cleaned.data$phy, cont.data, model="OUMV", simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(nodeBased.OUMV)
# OUM doesnt work: removed it
models <- c("BM1","BMS","OU1","OUMV","OUMA","OUMVA")
RunSingleOUwieModel <- function(model, phy, data)
{
nodeBased.OUMV <- OUwie(phy, data, model=model, simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
return(nodeBased.OUMV)
}
results <- lapply(models, RunSingleOUwieModel, phy=cleaned.data$phy, data=cont.data)
AICc.values<-sapply(results, "[[", "AICc")
names(AICc.values)<-models
AICc.values<-AICc.values-min(AICc.values)
print(AICc.values) #The best model is the one with smallest AICc score
best<-results[[which.min(AICc.values)]] #store for later
print(best) #prints info on best model
alpha.values<-seq(from= 0.5 , to= 2 , length.out=50)
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=best$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
rep(alpha.values[iteration],2)
sigma.sq=results[[4]]$solution[2,]
results[[4]]$solution[2,]
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],3), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
cleaned.data$phy$node.label <- best.states
reg <- sample(0:1, nrow(cleaned.data$data), TRUE) #rep(1, nrow(cleaned.data$data))
cont.data <- data.frame(species=rownames(cleaned.data$data), Reg=reg, trait=cleaned.data$data[,1])
nodeBased.OUMV <- OUwie(cleaned.data$phy, cont.data, model="OUMV", simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(nodeBased.OUMV)
# OUM doesnt work: removed it
models <- c("BM1","BMS","OU1","OUMV","OUMA","OUMVA")
RunSingleOUwieModel <- function(model, phy, data)
{
nodeBased.OUMV <- OUwie(phy, data, model=model, simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
return(nodeBased.OUMV)
}
results <- lapply(models, RunSingleOUwieModel, phy=cleaned.data$phy, data=cont.data)
AICc.values<-sapply(results, "[[", "AICc")
names(AICc.values)<-models
AICc.values<-AICc.values-min(AICc.values)
print(AICc.values) #The best model is the one with smallest AICc score
best<-results[[which.min(AICc.values)]] #store for later
print(best) #prints info on best model
alpha.values<-seq(from= 0.5 , to= 2 , length.out=50)
results[[4]]$solution
alpha.values<-seq(from= 0 , to= 1 , length.out=50)
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
alpha.values<-seq(from= 0.01 , to= 1 , length.out=50)
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
plot(x= alpha.values , y= likelihood.values, xlab=expression(alpha), ylab="log(Likelihood)", type="l", bty="n")
points(x=best$solution[1,1], y=-best$loglik, pch=16, col="red")
text(x=best$solution[1,1], y=-best$loglik, "unconstrained best", pos=4, col="red")
abline(h=max(likelihood.values)-2, lty="dotted") #Two log-likelihood
# five is the OUMV model. my best model was BM1
require("akima")
nreps<-400
theta1.points<-c(results[[4]]$theta[1,1], rnorm(nreps-1, results[[4]]$theta[1,1], 5*results[[4]]$theta[1,2])) #center on optimal value, have extra variance
theta2.points<-c(results[[4]]$theta[2,1], rnorm(nreps-1, results[[4]]$theta[2,1], 5*results[[4]]$theta[2,2])) #center on optimal value, have extra variance
likelihood.values<-rep(NA,nreps)
for (iteration in sequence(nreps)) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=results[[4]]$solution[1,], sigma.sq=results[[4]]$solution[2,], theta=c(theta1.points[iteration], theta2.points[iteration]), root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
likelihood.differences<-(-(likelihood.values-max(likelihood.values)))
interpolated.points<-interp(x=theta1.points, y=theta2.points, z= likelihood.differences, linear=FALSE, extrap=TRUE, xo=seq(min(theta1.points), max(theta1.points), length = 400), yo=seq(min(theta2.points), max(theta2.points), length = 400))
contour(interpolated.points, xlim=range(c(theta1.points, theta2.points)),ylim=range(c(theta1.points, theta2.points)), xlab="Theta 1", ylab="Theta 2", levels=c(2,5,10),add=FALSE,lwd=1, bty="n", asp=1)
points(x=results[[5]]$theta[1,1], y=results[[5]]$theta[2,1], col="red", pch=16)
trait <- cont.data
points(x=trait$trait[which(trait$Reg==1)],y=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==1))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 1, plotted along x axis
points(y=trait$trait[which(trait$Reg==2)],x=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==2))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 2, plotted along y axis
library(phytools)
trait.ordered <- data.frame(trait[,2], trait[,2],row.names=trait[,1])
trait.ordered <- trait.ordered[tree$tip.label,]
z<-trait.ordered[,1]
names(z)<-rownames(trait.ordered)
tree.mapped<-make.simmap(tree, z, model="ER", nsim=1)
leg<-c("black","red")
names(leg)<-c(1,2)
plotSimmap(tree.mapped,leg,pts=FALSE,ftype="off", lwd=1)
simmapBased<-OUwie(tree.mapped,trait,model="OUMV", simmap.tree=TRUE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(simmapBased)
print(best)
interpolated.points<-interp(x=theta1.points, y=theta2.points, z= likelihood.differences, linear=FALSE, extrap=TRUE, xo=seq(min(theta1.points), max(theta1.points), length = 400), yo=seq(min(theta2.points), max(theta2.points), length = 400))
contour(interpolated.points, xlim=range(c(theta1.points, theta2.points)),ylim=range(c(theta1.points, theta2.points)), xlab="Theta 1", ylab="Theta 2", levels=c(2,5,10),add=FALSE,lwd=1, bty="n", asp=1)
points(x=results[[5]]$theta[1,1], y=results[[5]]$theta[2,1], col="red", pch=16)
trait <- cont.data
points(x=trait$trait[which(trait$Reg==1)],y=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==1))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 1, plotted along x axis
points(y=trait$trait[which(trait$Reg==2)],x=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==2))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 2, plotted along y axis
cleaned.data$phy$node.label <- best.states
reg <- sample(0:1, nrow(cleaned.data$data), TRUE) #rep(1, nrow(cleaned.data$data))
cont.data <- data.frame(species=rownames(cleaned.data$data), Reg=reg, trait=cleaned.data$data[,1])
nodeBased.OUMV <- OUwie(cleaned.data$phy, cont.data, model="OUMV", simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(nodeBased.OUMV)
# OUM doesnt work: removed it
models <- c("BM1","BMS","OU1","OUMV","OUMA","OUMVA")
RunSingleOUwieModel <- function(model, phy, data)
{
nodeBased.OUMV <- OUwie(phy, data, model=model, simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
return(nodeBased.OUMV)
}
results <- lapply(models, RunSingleOUwieModel, phy=cleaned.data$phy, data=cont.data)
AICc.values<-sapply(results, "[[", "AICc")
names(AICc.values)<-models
AICc.values<-AICc.values-min(AICc.values)
print(AICc.values) #The best model is the one with smallest AICc score
best<-results[[which.min(AICc.values)]] #store for later
print(best) #prints info on best model
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
plot(x= alpha.values , y= likelihood.values, xlab=expression(alpha), ylab="log(Likelihood)", type="l", bty="n")
points(x=best$solution[1,1], y=-best$loglik, pch=16, col="red")
text(x=best$solution[1,1], y=-best$loglik, "unconstrained best", pos=4, col="red")
abline(h=max(likelihood.values)-2, lty="dotted") #Two log-likelihood
reg
cleaned.data$phy$node.label <- best.states
reg <- c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1)
cont.data <- data.frame(species=rownames(cleaned.data$data), Reg=reg, trait=cleaned.data$data[,1])
nodeBased.OUMV <- OUwie(cleaned.data$phy, cont.data, model="OUMV", simmap.tree=FALSE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(nodeBased.OUMV)
alpha.values<-seq(from= 0.01 , to= 2 , length.out=50)
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
plot(x= alpha.values , y= likelihood.values, xlab=expression(alpha), ylab="log(Likelihood)", type="l", bty="n")
points(x=best$solution[1,1], y=-best$loglik, pch=16, col="red")
text(x=best$solution[1,1], y=-best$loglik, "unconstrained best", pos=4, col="red")
abline(h=max(likelihood.values)-2, lty="dotted") #Two log-likelihood
alpha.values<-seq(from= 0.01 , to= 1.2 , length.out=50)
likelihood.values <- rep(NA, length(alpha.values))
for (iteration in sequence(length(alpha.values))) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=rep(alpha.values[iteration],2), sigma.sq=results[[4]]$solution[2,], theta=best$theta[,1], root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
plot(x= alpha.values , y= likelihood.values, xlab=expression(alpha), ylab="log(Likelihood)", type="l", bty="n")
points(x=best$solution[1,1], y=-best$loglik, pch=16, col="red")
text(x=best$solution[1,1], y=-best$loglik, "unconstrained best", pos=4, col="red")
abline(h=max(likelihood.values)-2, lty="dotted") #Two log-likelihood
# five is the OUMV model. my best model was BM1
require("akima")
nreps<-400
theta1.points<-c(results[[4]]$theta[1,1], rnorm(nreps-1, results[[4]]$theta[1,1], 5*results[[4]]$theta[1,2])) #center on optimal value, have extra variance
theta2.points<-c(results[[4]]$theta[2,1], rnorm(nreps-1, results[[4]]$theta[2,1], 5*results[[4]]$theta[2,2])) #center on optimal value, have extra variance
likelihood.values<-rep(NA,nreps)
for (iteration in sequence(nreps)) {
likelihood.values[iteration] <- OUwie.fixed(cleaned.data$phy, cont.data, model="OUMV", alpha=results[[4]]$solution[1,], sigma.sq=results[[4]]$solution[2,], theta=c(theta1.points[iteration], theta2.points[iteration]), root.age = max(phytools::nodeHeights(cleaned.data$phy)))$loglik
}
likelihood.differences<-(-(likelihood.values-max(likelihood.values)))
interpolated.points<-interp(x=theta1.points, y=theta2.points, z= likelihood.differences, linear=FALSE, extrap=TRUE, xo=seq(min(theta1.points), max(theta1.points), length = 400), yo=seq(min(theta2.points), max(theta2.points), length = 400))
contour(interpolated.points, xlim=range(c(theta1.points, theta2.points)),ylim=range(c(theta1.points, theta2.points)), xlab="Theta 1", ylab="Theta 2", levels=c(2,5,10),add=FALSE,lwd=1, bty="n", asp=1)
points(x=results[[5]]$theta[1,1], y=results[[5]]$theta[2,1], col="red", pch=16)
trait <- cont.data
points(x=trait$trait[which(trait$Reg==1)],y=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==1))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 1, plotted along x axis
points(y=trait$trait[which(trait$Reg==2)],x=rep(min(c(theta1.points, theta2.points)), length(which(trait$Reg==2))), pch=18, col=rgb(0,0,0,.3)) #the tip values in regime 2, plotted along y axis
library(phytools)
trait.ordered <- data.frame(trait[,2], trait[,2],row.names=trait[,1])
trait.ordered <- trait.ordered[tree$tip.label,]
z<-trait.ordered[,1]
names(z)<-rownames(trait.ordered)
tree.mapped<-make.simmap(tree, z, model="ER", nsim=1)
leg<-c("black","red")
names(leg)<-c(1,2)
plotSimmap(tree.mapped,leg,pts=FALSE,ftype="off", lwd=1)
simmapBased<-OUwie(tree.mapped,trait,model="OUMV", simmap.tree=TRUE, diagn=FALSE, root.age = max(phytools::nodeHeights(cleaned.data$phy)))
print(simmapBased)
print(best)
library(geiger)
library(pic)
install.packages("pic")
library(geiger)
#library(pic)
tree.primates <- read.tree(text="((((Homo:0.21,Pongo:0.21):0.28,Macaca:0.49):0.13,Ateles:0.62):0.38,Galago:1.00);") #using examples from ape ?pic
X <- c(4.09434, 3.61092, 2.37024, 2.02815, -1.46968)
Y <- c(4.74493, 3.33220, 3.36730, 2.89037, 2.30259)
names(X) <- names(Y) <- c("Homo", "Pongo", "Macaca", "Ateles", "Galago")
pic.X <- pic(X, tree.primates)
pic.Y <- pic(Y, tree.primates)
require("corHMM")
?corHMM
data(primates)
ls()
print(primates)
require(phytools)
library(geiger)
#library(pic)
tree.primates <- read.tree(text="((((Homo:0.21,Pongo:0.21):0.28,Macaca:0.49):0.13,Ateles:0.62):0.38,Galago:1.00);") #using examples from ape ?pic
X <- c(4.09434, 3.61092, 2.37024, 2.02815, -1.46968)
Y <- c(4.74493, 3.33220, 3.36730, 2.89037, 2.30259)
names(X) <- names(Y) <- c("Homo", "Pongo", "Macaca", "Ateles", "Galago")
pic.X <- pic(X, tree.primates)
pic.Y <- pic(Y, tree.primates)
require("corHMM")
?corHMM
data(primates)
ls()
print(primates)
require(phytools)
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2]<-1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
pp.er<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.er,node.states="marginal")
print(pp.er)
rate.mat.ard<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ARD")
print(rate.mat.ard)
pp.ard<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.ard,node.states="marginal")
print(pp.ard)
rate.mat.er.4state<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=4, model="ER")
print(rate.mat.er.4state)
fourstate.trait<-rep(NA,Ntip(primates$tree))
for(i in sequence(Ntip(primates$tree))) {
if(primates$trait[i,2]==0 && primates$trait[i,3]==0) {
fourstate.trait[i]<-0
}
if(primates$trait[i,2]==0 && primates$trait[i,3]==1) {
fourstate.trait[i]<-1
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==0) {
fourstate.trait[i]<-2
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==1) {
fourstate.trait[i]<-3
}
}
fourstate.data<-data.frame(Genus_sp=primates$trait[,1], T1=fourstate.trait)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, model="ER", node.states="marginal"))
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat=rate.mat.er.4state, node.states="marginal", model="ARD"))
rate.mat.ard.4state<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=4, model="ARD")
print(rate.mat.ard.4state)
rate.mat.gtr.4state<-rate.mat.ard.4state
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(1,4))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(2,6))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(3,8))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(4,6))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(5,7))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(6,7))
print(rate.mat.gtr.4state)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat= rate.mat.gtr.4state, node.states="marginal", model="ARD"))
print(rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=2, nstates=2, model="ARD"))
rate.mat.pag94<-rate.par.drop(rate.mat.ard.4state, drop.par=c(3,5,8,10))
print
print(rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=2, nstates=2, model="ARD"))
rate.mat.pag94<-rate.par.drop(rate.mat.ard.4state, drop.par=c(3,5,8,10))
print(rate.mat.pag94)
primates$trait
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] < -1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
library(geiger)
#library(pic)
tree.primates <- read.tree(text="((((Homo:0.21,Pongo:0.21):0.28,Macaca:0.49):0.13,Ateles:0.62):0.38,Galago:1.00);") #using examples from ape ?pic
X <- c(4.09434, 3.61092, 2.37024, 2.02815, -1.46968)
Y <- c(4.74493, 3.33220, 3.36730, 2.89037, 2.30259)
names(X) <- names(Y) <- c("Homo", "Pongo", "Macaca", "Ateles", "Galago")
pic.X <- pic(X, tree.primates)
pic.Y <- pic(Y, tree.primates)
require("corHMM")
?corHMM
data(primates)
ls()
print(primates)
require(phytools)
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] < -1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
print(rate.mat.er)
?rate.mat.maker
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] < -1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
pp.er<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.er,node.states="marginal")
print(pp.er)
rate.mat.ard<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ARD")
print(rate.mat.ard)
pp.ard<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.ard,node.states="marginal")
print(pp.ard)
rate.mat.er.4state<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=4, model="ER")
print(rate.mat.er.4state)
fourstate.trait<-rep(NA,Ntip(primates$tree))
for(i in sequence(Ntip(primates$tree))) {
if(primates$trait[i,2]==0 && primates$trait[i,3]==0) {
fourstate.trait[i]<-0
}
if(primates$trait[i,2]==0 && primates$trait[i,3]==1) {
fourstate.trait[i]<-1
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==0) {
fourstate.trait[i]<-2
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==1) {
fourstate.trait[i]<-3
}
}
fourstate.data<-data.frame(Genus_sp=primates$trait[,1], T1=fourstate.trait)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, model="ER", node.states="marginal"))
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat=rate.mat.er.4state, node.states="marginal", model="ARD"))
library(geiger)
#library(pic)
tree.primates <- read.tree(text="((((Homo:0.21,Pongo:0.21):0.28,Macaca:0.49):0.13,Ateles:0.62):0.38,Galago:1.00);") #using examples from ape ?pic
X <- c(4.09434, 3.61092, 2.37024, 2.02815, -1.46968)
Y <- c(4.74493, 3.33220, 3.36730, 2.89037, 2.30259)
names(X) <- names(Y) <- c("Homo", "Pongo", "Macaca", "Ateles", "Galago")
pic.X <- pic(X, tree.primates)
pic.Y <- pic(Y, tree.primates)
require("corHMM")
?corHMM
data(primates)
ls()
print(primates)
require(phytools)
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] < -1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
pp.er<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.er,node.states="marginal")
print(pp.er)
rate.mat.ard<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ARD")
print(rate.mat.ard)
pp.ard<-corHMM(primates$tree,primates$trait[,c(1,2)],rate.cat=1,rate.mat=rate.mat.ard,node.states="marginal")
print(pp.ard)
rate.mat.er.4state<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=4, model="ER")
print(rate.mat.er.4state)
fourstate.trait<-rep(NA,Ntip(primates$tree))
for(i in sequence(Ntip(primates$tree))) {
if(primates$trait[i,2]==0 && primates$trait[i,3]==0) {
fourstate.trait[i]<-0
}
if(primates$trait[i,2]==0 && primates$trait[i,3]==1) {
fourstate.trait[i]<-1
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==0) {
fourstate.trait[i]<-2
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==1) {
fourstate.trait[i]<-3
}
}
fourstate.data<-data.frame(Genus_sp=primates$trait[,1], T1=fourstate.trait)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, model="ER", node.states="marginal"))
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat=rate.mat.er.4state, node.states="marginal", model="ARD"))
fourstate.data
rate.mat.maker
fourstate.data
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] < -1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
fourstate.trait<-rep(NA,Ntip(primates$tree))
for(i in sequence(Ntip(primates$tree))) {
if(primates$trait[i,2]==0 && primates$trait[i,3]==0) {
fourstate.trait[i]<-0
}
if(primates$trait[i,2]==0 && primates$trait[i,3]==1) {
fourstate.trait[i]<-1
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==0) {
fourstate.trait[i]<-2
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==1) {
fourstate.trait[i]<-3
}
}
fourstate.data<-data.frame(Genus_sp=primates$trait[,1], T1=fourstate.trait)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, model="ER", node.states="marginal"))
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat=rate.mat.er.4state, node.states="marginal", model="ARD"))
fourstate.data
primates$trait
primates$trait[which(grepl("Hylobates",primates$trait[,1])),2] <- 1
trait1<-primates$trait[,2]
names(trait1)<-primates$trait[,1]
plotSimmap(make.simmap(primates$tree, trait1), pts=FALSE, fsize=0.8)
rate.mat.er<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=2, model="ER")
print(rate.mat.er)
fourstate.trait<-rep(NA,Ntip(primates$tree))
for(i in sequence(Ntip(primates$tree))) {
if(primates$trait[i,2]==0 && primates$trait[i,3]==0) {
fourstate.trait[i]<-0
}
if(primates$trait[i,2]==0 && primates$trait[i,3]==1) {
fourstate.trait[i]<-1
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==0) {
fourstate.trait[i]<-2
}
if(primates$trait[i,2]==1 && primates$trait[i,3]==1) {
fourstate.trait[i]<-3
}
}
fourstate.data<-data.frame(Genus_sp=primates$trait[,1], T1=fourstate.trait)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, model="ER", node.states="marginal"))
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat=rate.mat.er.4state, node.states="marginal", model="ARD"))
rate.mat.ard.4state<-rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=1, nstates=4, model="ARD")
print(rate.mat.ard.4state)
rate.mat.gtr.4state<-rate.mat.ard.4state
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(1,4))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(2,6))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(3,8))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(4,6))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(5,7))
rate.mat.gtr.4state<-rate.par.eq(rate.mat.gtr.4state, c(6,7))
print(rate.mat.gtr.4state)
print(rayDISC(primates$tree, fourstate.data, ntraits=1, rate.mat= rate.mat.gtr.4state, node.states="marginal", model="ARD"))
print(rate.mat.maker(rate.cat=1, hrm=FALSE, ntraits=2, nstates=2, model="ARD"))
rate.mat.pag94<-rate.par.drop(rate.mat.ard.4state, drop.par=c(3,5,8,10))
print(rate.mat.pag94)
?rayDISC
